// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// hardThresholdCpp
arma::vec hardThresholdCpp(arma::mat u, double thres);
RcppExport SEXP _TSLA_hardThresholdCpp(SEXP uSEXP, SEXP thresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type u(uSEXP);
    Rcpp::traits::input_parameter< double >::type thres(thresSEXP);
    rcpp_result_gen = Rcpp::wrap(hardThresholdCpp(u, thres));
    return rcpp_result_gen;
END_RCPP
}
// shrinkGroupCpp
arma::vec shrinkGroupCpp(arma::vec u, arma::mat g_idx);
RcppExport SEXP _TSLA_shrinkGroupCpp(SEXP uSEXP, SEXP g_idxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type u(uSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type g_idx(g_idxSEXP);
    rcpp_result_gen = Rcpp::wrap(shrinkGroupCpp(u, g_idx));
    return rcpp_result_gen;
END_RCPP
}
// cal2norm
arma::vec cal2norm(arma::vec u, arma::mat g_idx, int type);
RcppExport SEXP _TSLA_cal2norm(SEXP uSEXP, SEXP g_idxSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type u(uSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type g_idx(g_idxSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(cal2norm(u, g_idx, type));
    return rcpp_result_gen;
END_RCPP
}
// SPGlinear
arma::vec SPGlinear(arma::vec y, arma::mat X_1, arma::mat X_2, arma::mat C_1, double C_1norm, arma::mat C_2, double C_2norm, arma::mat g_idx, arma::vec gamma_est, double lambda, double alpha, double Mu, int maxit, double tol, bool verbose);
RcppExport SEXP _TSLA_SPGlinear(SEXP ySEXP, SEXP X_1SEXP, SEXP X_2SEXP, SEXP C_1SEXP, SEXP C_1normSEXP, SEXP C_2SEXP, SEXP C_2normSEXP, SEXP g_idxSEXP, SEXP gamma_estSEXP, SEXP lambdaSEXP, SEXP alphaSEXP, SEXP MuSEXP, SEXP maxitSEXP, SEXP tolSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X_1(X_1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X_2(X_2SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type C_1(C_1SEXP);
    Rcpp::traits::input_parameter< double >::type C_1norm(C_1normSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type C_2(C_2SEXP);
    Rcpp::traits::input_parameter< double >::type C_2norm(C_2normSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type g_idx(g_idxSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type gamma_est(gamma_estSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type Mu(MuSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(SPGlinear(y, X_1, X_2, C_1, C_1norm, C_2, C_2norm, g_idx, gamma_est, lambda, alpha, Mu, maxit, tol, verbose));
    return rcpp_result_gen;
END_RCPP
}
// SPGlogistic
arma::vec SPGlogistic(arma::vec y, arma::mat X_1, arma::mat X_2, arma::mat C_1, double C_1norm, arma::mat C_2, double C_2norm, arma::mat g_idx, arma::vec gamma_est, arma::vec weight, double lambda, double alpha, double Mu, int maxit, double tol, bool verbose);
RcppExport SEXP _TSLA_SPGlogistic(SEXP ySEXP, SEXP X_1SEXP, SEXP X_2SEXP, SEXP C_1SEXP, SEXP C_1normSEXP, SEXP C_2SEXP, SEXP C_2normSEXP, SEXP g_idxSEXP, SEXP gamma_estSEXP, SEXP weightSEXP, SEXP lambdaSEXP, SEXP alphaSEXP, SEXP MuSEXP, SEXP maxitSEXP, SEXP tolSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X_1(X_1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X_2(X_2SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type C_1(C_1SEXP);
    Rcpp::traits::input_parameter< double >::type C_1norm(C_1normSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type C_2(C_2SEXP);
    Rcpp::traits::input_parameter< double >::type C_2norm(C_2normSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type g_idx(g_idxSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type gamma_est(gamma_estSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type Mu(MuSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(SPGlogistic(y, X_1, X_2, C_1, C_1norm, C_2, C_2norm, g_idx, gamma_est, weight, lambda, alpha, Mu, maxit, tol, verbose));
    return rcpp_result_gen;
END_RCPP
}
// warm_start_ls
arma::mat warm_start_ls(arma::vec y, arma::mat X_1, arma::mat X_2, arma::mat C_1, double C_1norm, arma::mat C_2, double C_2norm, arma::mat g_idx, arma::vec gamma_init, arma::vec lambda, double alpha, double Mu, int maxit, double tol, bool verbose);
RcppExport SEXP _TSLA_warm_start_ls(SEXP ySEXP, SEXP X_1SEXP, SEXP X_2SEXP, SEXP C_1SEXP, SEXP C_1normSEXP, SEXP C_2SEXP, SEXP C_2normSEXP, SEXP g_idxSEXP, SEXP gamma_initSEXP, SEXP lambdaSEXP, SEXP alphaSEXP, SEXP MuSEXP, SEXP maxitSEXP, SEXP tolSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X_1(X_1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X_2(X_2SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type C_1(C_1SEXP);
    Rcpp::traits::input_parameter< double >::type C_1norm(C_1normSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type C_2(C_2SEXP);
    Rcpp::traits::input_parameter< double >::type C_2norm(C_2normSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type g_idx(g_idxSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type gamma_init(gamma_initSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type Mu(MuSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(warm_start_ls(y, X_1, X_2, C_1, C_1norm, C_2, C_2norm, g_idx, gamma_init, lambda, alpha, Mu, maxit, tol, verbose));
    return rcpp_result_gen;
END_RCPP
}
// warm_start_logistic
arma::mat warm_start_logistic(arma::vec y, arma::mat X_1, arma::mat X_2, arma::mat C_1, double C_1norm, arma::mat C_2, double C_2norm, arma::mat g_idx, arma::vec gamma_init, arma::vec weight, arma::vec lambda, double alpha, double Mu, int maxit, double tol, bool verbose);
RcppExport SEXP _TSLA_warm_start_logistic(SEXP ySEXP, SEXP X_1SEXP, SEXP X_2SEXP, SEXP C_1SEXP, SEXP C_1normSEXP, SEXP C_2SEXP, SEXP C_2normSEXP, SEXP g_idxSEXP, SEXP gamma_initSEXP, SEXP weightSEXP, SEXP lambdaSEXP, SEXP alphaSEXP, SEXP MuSEXP, SEXP maxitSEXP, SEXP tolSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X_1(X_1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X_2(X_2SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type C_1(C_1SEXP);
    Rcpp::traits::input_parameter< double >::type C_1norm(C_1normSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type C_2(C_2SEXP);
    Rcpp::traits::input_parameter< double >::type C_2norm(C_2normSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type g_idx(g_idxSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type gamma_init(gamma_initSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type Mu(MuSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(warm_start_logistic(y, X_1, X_2, C_1, C_1norm, C_2, C_2norm, g_idx, gamma_init, weight, lambda, alpha, Mu, maxit, tol, verbose));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_TSLA_hardThresholdCpp", (DL_FUNC) &_TSLA_hardThresholdCpp, 2},
    {"_TSLA_shrinkGroupCpp", (DL_FUNC) &_TSLA_shrinkGroupCpp, 2},
    {"_TSLA_cal2norm", (DL_FUNC) &_TSLA_cal2norm, 3},
    {"_TSLA_SPGlinear", (DL_FUNC) &_TSLA_SPGlinear, 15},
    {"_TSLA_SPGlogistic", (DL_FUNC) &_TSLA_SPGlogistic, 16},
    {"_TSLA_warm_start_ls", (DL_FUNC) &_TSLA_warm_start_ls, 15},
    {"_TSLA_warm_start_logistic", (DL_FUNC) &_TSLA_warm_start_logistic, 16},
    {NULL, NULL, 0}
};

RcppExport void R_init_TSLA(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
